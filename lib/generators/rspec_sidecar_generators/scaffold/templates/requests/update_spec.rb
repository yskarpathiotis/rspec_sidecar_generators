require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

<% module_namespacing do -%>
RSpec.describe "PATCH /<%= name.underscore.pluralize %>/:id", <%= type_metatag(:request) %> do
<% if mountable_engine? -%>
  include Engine.routes.url_helpers
<% end -%>
  let!(:<%= name.underscore %>) {create(:<%= name.underscore %>)}

  context "with valid parameters" do
    let(:new_attributes) {
      skip("Add a hash of attributes valid for your model")
    }

    it "updates the requested <%= ns_file_name %>" do
      patch <%= show_helper.tr('@', '') %>, params: { <%= singular_table_name %>: new_attributes }
      <%= file_name %>.reload
      skip("Add assertions for updated state")
    end

    it "redirects to the <%= ns_file_name %>" do
      patch <%= show_helper.tr('@', '') %>, params: { <%= singular_table_name %>: new_attributes }
      <%= file_name %>.reload
      expect(response).to redirect_to(<%= singular_table_name %>_url(<%= file_name %>))
    end
  end

  context "with invalid parameters" do
    let(:invalid_attributes) {
      skip("Add a hash of attributes invalid for your model")
    }

    it "renders a successful response (i.e. to display the 'edit' template)" do
      patch <%= show_helper.tr('@', '') %>, params: { <%= singular_table_name %>: invalid_attributes }
      expect(response).to be_successful
    end
  end
end
<% end -%>
